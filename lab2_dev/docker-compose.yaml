services:
  rabbitmq:
    image: rabbitmq:3.13-management
    hostname: rabbitmq
    ports:
      - 5672:5672
      - 15672:15672
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
      RABBITMQ_DEFAULT_VHOST: /
    healthcheck:
      test: [ "CMD", "rabbitmq-diagnostics", "ping" ]
      interval: 5s
      timeout: 10s
      retries: 5
    networks:
      - crackhash-network

  mongodb-primary:
    image: mongo:6.0
    restart: always
    ports:
      - "27017:27017"
    container_name: mongodb-primary
    command: mongod --replSet rs0 --bind_ip_all
    healthcheck:
      test: ["CMD", "mongosh", "--quiet", "--eval", "db.runCommand({ ping: 1 }).ok"]
      interval: 5s
      timeout: 30s
      retries: 10
    volumes:
      - mongodata-primary:/data/db
    networks:
      - crackhash-network

  mongodb-secondary1:
    image: mongo:6.0
    restart: always
    container_name: mongodb-secondary1
    command: mongod --replSet rs0 --bind_ip_all
    depends_on:
      mongodb-primary:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "mongosh", "--quiet", "--eval", "db.runCommand({ ping: 1 }).ok"]
      interval: 5s
      timeout: 30s
      retries: 10
    volumes:
      - mongodata-secondary1:/data/db
    networks:
      - crackhash-network

  mongodb-secondary2:
    image: mongo:6.0
    restart: always
    container_name: mongodb-secondary2
    command: mongod --replSet rs0 --bind_ip_all
    depends_on:
      mongodb-primary:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "mongosh", "--quiet", "--eval", "db.runCommand({ ping: 1 }).ok"]
      interval: 5s
      timeout: 30s
      retries: 10
    volumes:
      - mongodata-secondary2:/data/db
    networks:
      - crackhash-network

  mongo-init:
    image: mongo:6.0
    container_name: mongo-init
    depends_on:
      mongodb-primary:
        condition: service_healthy
      mongodb-secondary1:
        condition: service_healthy
      mongodb-secondary2:
        condition: service_healthy
    restart: on-failure
    entrypoint: >
      sh -c "
      mongosh --host mongodb-primary:27017 --eval '
        rs.initiate({
          _id: \"rs0\",
          members: [
            { _id: 0, host: \"mongodb-primary:27017\" },
            { _id: 1, host: \"mongodb-secondary1:27017\" },
            { _id: 2, host: \"mongodb-secondary2:27017\" }
          ]
        })
      '"
    networks:
      - crackhash-network

  manager:
    build:
      context: ./manager
      dockerfile: Dockerfile
    container_name: crackhash-manager
    ports:
      - "8080:8080"
    environment:
      - WORKER_COUNT=4
      - SPRING_RABBITMQ_HOST=rabbitmq
      - SPRING_DATA_MONGODB_URI=mongodb://mongodb-primary:27017/crackhash?replicaSet=rs0&readPreference=primaryPreferred&retryWrites=true&w=majority&authSource=admin
    depends_on:
      rabbitmq:
        condition: service_healthy
      mongo-init:
        condition: service_completed_successfully
    networks:
      - crackhash-network

  worker1:
    build:
      context: ./worker
      dockerfile: Dockerfile
    container_name: crackhash-worker-1
    depends_on:
      rabbitmq:
        condition: service_healthy
    ports:
      - "8081:8081"
    environment:
      - WORKER_PORT=8081
      - SPRING_RABBITMQ_HOST=rabbitmq
    networks:
      - crackhash-network

  worker2:
    build:
      context: ./worker
      dockerfile: Dockerfile
    container_name: crackhash-worker-2
    depends_on:
      rabbitmq:
        condition: service_healthy
    ports:
      - "8082:8082"
    environment:
      - WORKER_PORT=8082
      - SPRING_RABBITMQ_HOST=rabbitmq
    networks:
      - crackhash-network

volumes:
  mongodata-primary:
  mongodata-secondary1:
  mongodata-secondary2:

networks:
  crackhash-network:
    driver: bridge